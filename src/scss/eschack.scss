$base-bg-color: darkgrey;
$component-bg-color: hsl(0,0%,90%);
$component-accent-color: hsl(0,0%,85%);
$base-font: "Courier New", monospace;
$nbsp: "\a0";
$canvas-width: 1040px;
$canvas-height: 520px;
$basic-border: 1px solid black;
$bar-primary-color: hsl(0, 63%, 63%);
$bar-secondary-color: hsl(118, 32%, 77%);
$bar-text-color: black;
$hilight-color: yellow;
$cursor-color: hsl(227, 95%, 33%);
$main-width: 98vw;

@mixin MainViewWidth(){
	max-width: $canvas-width;
	width: $main-width;
}

@mixin PseudoBlock($p) {
	&:#{$p} {
		content: "";
		position: absolute;
		top: 0;
		bottom: 0;
		left: 0;
		right: 0;
	}
}
@mixin Offscreen() {
	position: absolute;
	top: -9001px;
	left: -9001px;
}
body {
	margin: 0;
	background: $base-bg-color;
	font-family: $base-font;
}
.column {
	display: inline-block;
	vertical-align: top;
}
canvas {
	display: block;
	@include MainViewWidth();
	&#canvas-second {
		position: absolute;
		top: 0;
		left: 0;
		z-index: -1;
		opacity: 0.3;
	}
}
#canvas-container {
	position: relative;
	@include MainViewWidth();
	height: $canvas-height;
}
#logbox {
	box-sizing: border-box;
	@include MainViewWidth();
	height: 200px;
	background: $component-bg-color;
	color: black;
	& .logbox-row {
		width: 100%;
		height: 10%;
		padding-left: 10px;
		box-sizing: border-box;
		&:after {
			content: $nbsp;
		}
		&:nth-child(even) {
			background: $component-accent-color;
		}
		& .logmsg {
			&.logmsg-default {
				color: black;
			}
			&.logmsg-junk1 {
				color: hsl(0, 0%, 30%);
			}
			&.logmsg-junk2 {
				color: hsl(0, 0%, 50%);
			}
			&.logmsg-threat1 {
				color: hsl(40, 40%, 40%);
			}
			&.logmsg-hilight {
				color: hsl(294, 57%, 43%);
			}
			&.logmsg-hit {
				color: hsl(211, 75%, 40%);
			}
			&.logmsg-damage {
				color: hsl(28, 74%, 39%);
			}
			&.logmsg-miss {
				color: hsl(90, 2%, 33%);
			}
			&.logmsg-death {
				color: hsl(0, 83%, 50%);
			}
		}
	}
}
#column-right {
	padding: 10px;
	box-sizing: border-box;
	max-width: calc(100% - 100px - #{$canvas-width});
	position: relative;
	> * {
		//padding: 20px 0 80px 0;
	}
}
$info-container-tops: ( left: 10, right: 10 );
$info-containers-margin: 20;
@mixin InfoContainersTopCalc($height, $side) {
	top: map-get($info-container-tops, $side) + px;
	height: $height + px;
	$info-container-tops: map-merge($info-container-tops, ( $side: map-get($info-container-tops, $side) + $height + $info-containers-margin )) !global;
}
.info-container {
	&#info-container-player {
		@include InfoContainersTopCalc(200, "left");
		border: $basic-border;
		width: 340px;
		& .player-stat-row {
			display: inline-block;
			width: 50%;
			& .player-stat-name {
				display: inline-block;
				width: 70px;
				&:after {
					content: ":";
				}
			}
			& .player-stat-value {
				display: inline-block;
			}
		}
	}
	&#info-container-game {
		@include InfoContainersTopCalc(200, "right");
		border: $basic-border;
		left: 370px;
		width: 160px;
		& .game-stat-row {
			margin-left: 10px;
			&#game-stat-dungeonName {
				font-weight: bold;
				line-height: 2em;
				& .game-stat-name {
					width: 0;
				}
			}
			& .game-stat-name {
				display: inline-block;
				width: 70px;
			}
			& .game-stat-value {
				display: inline-block;
			}
		}
		& .game-stat-row:not(#game-stat-dungeonName) .game-stat-name {
			&:after {
				content: ":";
			}
		}
	}
	&#info-container-other-life {
		width: 100%;
		height: calc(100% - 23px);
		overflow-y: auto;
	}
}
#info-container-other-life-wrap {
	width: 240px;
	@include InfoContainersTopCalc(150, "left");
	border: $basic-border;
}
.info-container {
	&#info-container-other-misc {
		width: 240px;
		@include InfoContainersTopCalc(150, "left");
		border: $basic-border;
		& .examine-container {
			padding: 10px;
			height: calc(100% - 50px);
			overflow-y: auto;
		}
	}
	&#info-container-inventory {
		left: 270px;
		@include InfoContainersTopCalc(320, "right");
		width: 260px;
		border: $basic-border;
	}
	&#info-container-equipment {
		@include InfoContainersTopCalc(200, "left");
		width: 520px;
		border: $basic-border;
		& .equipment-row {
			& .equipment-key {
				display: inline-block;
				width: 40px;
				&:after {
					content: " - ";
				}
			}
			& .equipment-slot {
				display: inline-block;
				width: 70px;
			}
			& .equipment-item {
				display: inline-block;
				&:before {
					content: ": ";
				}
			}
		}
	}
}
#column-right{
	height: max(
		map-get($info-container-tops, left),
		map-get($info-container-tops, right)
	) + px;
	width: 530px;
}

.menu-title {
	background: black;
	color: darkgrey;
	display: block;
}
#bottom-row {
	> div {
		> h3 {
			margin: 0;
		}
		display: inline-block;
		margin: 10px;
		padding: 10px;
		border: $basic-border;
		vertical-align: top;
		& .content {
			height: 150px;
			overflow-y: auto;
		}
	}
}
label {
	display: inline-block;
	margin: 5px;
	&.hilighted {
		color: $hilight-color;
	}
}
.bar {
	@include PseudoBlock(after);
	@include PseudoBlock(before);
	height: 20px;
	width: 100px;
	background: $bar-primary-color;
	text-align: center;
	position: relative;
	overflow: hidden;
	box-sizing: border-box;
	&:before {
		background: $bar-secondary-color;
	}
	&:after {
		content: attr(data-content);
		//mix-blend-mode: difference;
		//filter: invert(1);
		color: $bar-text-color;
	}
	&.hilighted {
		border: 1px solid $hilight-color;
	}
	@for $i from 0 through 100 {
		&.bar-size-#{$i} {
			&:before {
				right: #{100 - $i + "%"};
			}
		}
	}
}
#cursor {
	position: absolute;
	top: 0;
	left: 0;
	border: 2px solid $cursor-color;
	filter: invert(1);
	mix-blend-mode: difference;
	box-sizing: border-box;
	box-shadow: 0 0 5px $cursor-color;
	transition: top 0.1s, left 0.1s;
}
/*
loader stolen from here
codepen.io/Vestride/pen/vHzyk
*/
$blockCount: 3;
$blockSize: 2em;
$delay: 0.065s;
$duration: 0.88s;
$startingColor: #fdfdfd;
$endingColor: #dadada;
$blockMargin: $blockSize / $blockCount;
$loaderSize: $blockSize * $blockCount + $blockMargin * 2;
#loader {
	position: absolute;
	top: 50%;
	left: 50%;
	width: $loaderSize;
	height: $loaderSize;
	margin-left: -$loaderSize/2;
	margin-top: -$loaderSize/2;
	& .loader-block {
		position: absolute;
		top: 0;
		left: 0;
		display: inline-block;
		opacity: 0;
		width: $blockSize;
		height: $blockSize;
		background: $startingColor;
		animation: show $duration step-end infinite alternate, pulse $duration linear infinite alternate;
		$delay-mults: (1,2,3,5,2,7,6,4,0);
		@for $i from 1 through $blockCount * $blockCount {
			&:nth-child(#{$i}) {
				$mult-x: ($i - 1) % $blockCount;
				$mult-y: floor(($i - 1) / $blockCount);
				transform: translate(#{($blockSize + $blockMargin) * $mult-x}, #{($blockSize + $blockMargin) * $mult-y});
				animation-delay: #{nth($delay-mults, $i) * $delay};
			}
		}
	}
}
@keyframes pulse {
	40%,
	from {
		background: $startingColor;
	}
	to {
		background: $endingColor;
	}
}
@keyframes show {
	40%,
	from {
		opacity: 0;
	}
	41%,
	to {
		opacity: 1;
	}
}
